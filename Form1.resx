<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="timer1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="errorProvider1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>104, 17</value>
  </metadata>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>25</value>
  </metadata>
  <data name="label45.Text" xml:space="preserve">
    <value>このシミュレーションの目的は、様々な状況における急停止などの車体の動きにより、どれほどの過電流が起こるか、またアーマチュア電圧を制御することで、
過電流が収まるかなどをグラフと数値で簡易的に示したものです。
部品自体の材質や性質をすべて考慮しているわけではなく、あくまで疑似的なシミュレーションになります。
対象製品;secret

①　この計算は、トルク定数と逆起電力定数を求めるものです。comboBoxから保存済みの数値を使うか、手動で入力するかを選んでください。
　　手動で入力する場合は、モーターの仕様書から各数値を入力して下さい。数値を入力後、計算ボタンを押してください。
　　※　このシミュレーションは他励式DCモータ（Separately Excited Motor）にのみ使用可。
　　 　　DCモーターであれば、計算式の小変更で対応可能である。ACモーターなどに関しては、対応できていない。
　　※　comboBoxに新たな条件を保存したい場合は、ソースコードに手を加える必要があります。
②　任意のフィールド電流とアーマチュア電流を入力してください。
　　入力した値の時のモータートルクが算出されます。
　　※　今回のシミュレーションでは、速度Maxから急停止をした際のシミュレーションであるため、速度はMax値で固定されている。
　　　　 つまり、Max値を入力してください。または、コードからhayasaの値を変更してください
③　任意の回転速度を入力してください。
　　入力した値の時のモーターの逆起電力が算出されます。
　　※　今回のシミュレーションでは、速度Maxから急停止をした際のシミュレーションであるため、速度はMax値で固定されている。
　　　　 つまり、Max値を入力してください。または、コードからhayasaの値を変更してください
④　comboBox（平面急停止、登坂急停止、下り坂急停止）から選び、角度をきめたうえで計算実行ボタンを押してください。
　　※　角度は、±12度の範囲で選ぶことができます。
------------------------------------------------------------------------------------------------------------------------
以下は、走行中の1分間の熱量の変化を示すものです。
急停止時の焼損度合いについては、過電流の大きさと比例関係であるため、グラフ過電流を見てください
⑤　実行ボタンを押してください。
　　※　各数値については、前段階の導入で算出済みです。
　　　　 これらは大まかな数値を示すものであり、正確ではありません。
⑥　各項目を入力したうえで、実行ボタンを押してください
　　※　初期導体温度は計測する前のモーター温度
　　　　 測定導体温度はモーターの計測温度
　　　　 初期抵抗値は、モーター全体の初期段階の抵抗値
⑥　実行ボタンを押してください
　　※　鉄損の算出は⑤の全体の損失から銅損を省いたものであり、
　　　　 大まかな数値であるために、正確ではありません。

</value>
  </data>
</root>